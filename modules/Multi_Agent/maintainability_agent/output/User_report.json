{
  "file": "User.json",
  "totalClasses": 1,
  "totalMethods": 4,
  "realLOC": 0,
  "realComments": 0,
  "averageScore": 63.8,
  "maintainabilityLevel": "Medium",
  "results": [
    {
      "className": "TestMaintainability",
      "methodName": "simpleMethod",
      "methodScore": 90,
      "maintainabilityLevel": "High",
      "metrics": [
        {
          "metric": "Function Length",
          "value": 10,
          "status": "Low",
          "penalty": 0,
          "message": "simpleMethod has 10 lines of code (Low)."
        },
        {
          "metric": "Nesting Depth",
          "value": 0,
          "status": "Low",
          "penalty": 0,
          "message": "simpleMethod has nesting depth 0 (Low)."
        },
        {
          "metric": "Cyclomatic Complexity",
          "value": 1,
          "status": "Low",
          "penalty": 0,
          "message": "simpleMethod has 1 decision points (Low)."
        },
        {
          "metric": "Parameter Count",
          "value": 0,
          "status": "Low",
          "penalty": 0,
          "message": "simpleMethod has 0 parameters (Low)."
        },
        {
          "metric": "Comment Ratio",
          "value": "0.0%",
          "status": "High",
          "penalty": 0.1,
          "message": "simpleMethod comment ratio = 0.0% (High)."
        },
        {
          "metric": "Naming Clarity",
          "value": "Good",
          "status": "Low",
          "penalty": 0,
          "message": "simpleMethod naming is clear."
        }
      ],
      "suggestions": [
        "ðŸ’¬ Low comment coverage. Add documentation or inline comments."
      ]
    },
    {
      "className": "TestMaintainability",
      "methodName": "mediumMethod",
      "methodScore": 69,
      "maintainabilityLevel": "Medium",
      "metrics": [
        {
          "metric": "Function Length",
          "value": 34,
          "status": "Medium",
          "penalty": 0.08,
          "message": "mediumMethod has 34 lines of code (Medium)."
        },
        {
          "metric": "Nesting Depth",
          "value": 3,
          "status": "Medium",
          "penalty": 0.08,
          "message": "mediumMethod has nesting depth 3 (Medium)."
        },
        {
          "metric": "Cyclomatic Complexity",
          "value": 4,
          "status": "Low",
          "penalty": 0,
          "message": "mediumMethod has 4 decision points (Low)."
        },
        {
          "metric": "Parameter Count",
          "value": 2,
          "status": "Low",
          "penalty": 0,
          "message": "mediumMethod has 2 parameters (Low)."
        },
        {
          "metric": "Comment Ratio",
          "value": "0.0%",
          "status": "High",
          "penalty": 0.1,
          "message": "mediumMethod comment ratio = 0.0% (High)."
        },
        {
          "metric": "Naming Clarity",
          "value": "a, b",
          "status": "Medium",
          "penalty": 0.05,
          "message": "mediumMethod has unclear identifiers: a, b."
        }
      ],
      "suggestions": [
        "ðŸ’¬ Low comment coverage. Add documentation or inline comments.",
        "ðŸ”¤ Some variable names are unclear. Use more descriptive names."
      ]
    },
    {
      "className": "TestMaintainability",
      "methodName": "deepNested",
      "methodScore": 54,
      "maintainabilityLevel": "Low",
      "metrics": [
        {
          "metric": "Function Length",
          "value": 47,
          "status": "Medium",
          "penalty": 0.08,
          "message": "deepNested has 47 lines of code (Medium)."
        },
        {
          "metric": "Nesting Depth",
          "value": 4,
          "status": "High",
          "penalty": 0.15,
          "message": "deepNested has nesting depth 4 (High)."
        },
        {
          "metric": "Cyclomatic Complexity",
          "value": 6,
          "status": "Medium",
          "penalty": 0.08,
          "message": "deepNested has 6 decision points (Medium)."
        },
        {
          "metric": "Parameter Count",
          "value": 1,
          "status": "Low",
          "penalty": 0,
          "message": "deepNested has 1 parameters (Low)."
        },
        {
          "metric": "Comment Ratio",
          "value": "0.0%",
          "status": "High",
          "penalty": 0.1,
          "message": "deepNested comment ratio = 0.0% (High)."
        },
        {
          "metric": "Naming Clarity",
          "value": "x",
          "status": "Medium",
          "penalty": 0.05,
          "message": "deepNested has unclear identifiers: x."
        }
      ],
      "suggestions": [
        "ðŸŒ€ Deeply nested logic. Consider flattening with early returns or switch cases.",
        "ðŸ’¬ Low comment coverage. Add documentation or inline comments.",
        "ðŸ”¤ Some variable names are unclear. Use more descriptive names."
      ]
    },
    {
      "className": "TestMaintainability",
      "methodName": "largeMethod",
      "methodScore": 42,
      "maintainabilityLevel": "Low",
      "metrics": [
        {
          "metric": "Function Length",
          "value": 72,
          "status": "High",
          "penalty": 0.15,
          "message": "largeMethod has 72 lines of code (High)."
        },
        {
          "metric": "Nesting Depth",
          "value": 4,
          "status": "High",
          "penalty": 0.15,
          "message": "largeMethod has nesting depth 4 (High)."
        },
        {
          "metric": "Cyclomatic Complexity",
          "value": 8,
          "status": "Medium",
          "penalty": 0.08,
          "message": "largeMethod has 8 decision points (Medium)."
        },
        {
          "metric": "Parameter Count",
          "value": 6,
          "status": "High",
          "penalty": 0.1,
          "message": "largeMethod has 6 parameters (High)."
        },
        {
          "metric": "Comment Ratio",
          "value": "0.0%",
          "status": "High",
          "penalty": 0.1,
          "message": "largeMethod comment ratio = 0.0% (High)."
        },
        {
          "metric": "Naming Clarity",
          "value": "Good",
          "status": "Low",
          "penalty": 0,
          "message": "largeMethod naming is clear."
        }
      ],
      "suggestions": [
        "ðŸ’¡ Function is too long. Split into smaller helper methods.",
        "ðŸŒ€ Deeply nested logic. Consider flattening with early returns or switch cases.",
        "ðŸ§© Too many parameters. Consider grouping into an object or class.",
        "ðŸ’¬ Low comment coverage. Add documentation or inline comments."
      ]
    }
  ],
  "message": "âœ… File User.json analyzed successfully."
}